[build-system]
requires = ["setuptools>=78.1.0", "setuptools-scm>=8.0", "wheel<0.43"]
build-backend = "setuptools.build_meta"

[project]
name = "ch-agent-zero"
dynamic = ["version"]
description = "Model Context Protocol (MCP) server for monitoring, analyzing, and managing ClickHouse databases"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Maruthi Prithivi", email = "maruthiprithivi@gmail.com"},
]
license = {file = "LICENSE"}
keywords = ["clickhouse", "mcp", "monitoring", "database", "agent"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: System :: Monitoring",
]
dependencies = [
    "clickhouse-connect>=0.8.18,<1.0",
    "mcp>=1.0.0,<2.0",
    "python-dotenv>=1.0.0,<2.0",
    "pip-system-certs>=4.0",
    # 2025 Standards - Modern Python Features
    "typing-extensions>=4.12.0",
    "pydantic>=2.9.0,<3.0",
    "asyncio-throttle>=1.0.2",
    # 2025 Standards - Security & Compliance
    "cryptography>=43.0.0",
    "PyJWT>=2.9.0",
    "python-oauth2>=1.1.1,<2.0",
    # 2025 Standards - Cloud Native
    "kubernetes>=30.1.0",
    "redis>=5.0.0",
    # 2025 Standards - Observability
    "opentelemetry-api>=1.27.0,<2.0",
    "opentelemetry-sdk>=1.27.0,<2.0",
]

[project.urls]
Homepage = "https://github.com/maruthiprithivi/agent_zero"
Documentation = "https://github.com/maruthiprithivi/agent_zero/blob/main/README.md"
"Bug Tracker" = "https://github.com/maruthiprithivi/agent_zero/issues"

[project.scripts]
ch-agent-zero = "agent_zero.main:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pre-commit>=3.8.0",
    "ruff>=0.6.0",
    "black>=24.0.0",
    "mypy>=1.11.0",
    "bandit>=1.7.0",
    "pydocstyle>=6.3.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.6.0",
    "hypothesis>=6.100.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.5.0",
]
remote = [
    "aiohttp>=3.10.0,<4.0",
    "aiohttp-cors>=0.7.0,<1.0",
    "aiohttp-session>=2.12.0",
    "websockets>=13.0",
    "httpx>=0.27.0",
]
monitoring = [
    "prometheus-client>=0.20.0,<1.0",
    "psutil>=6.0.0,<7.0",
    "structlog>=24.0.0,<25.0",
    "grafana-client>=4.0.0,<5.0",
    "jaeger-client>=4.8.0,<5.0",
]
production = [
    "ch-agent-zero[remote,monitoring]",
    "uvloop>=0.20.0,<1.0",
]
ai_ml = [
    "ch-agent-zero[monitoring]",
    "scikit-learn>=1.5.0,<2.0",
    "numpy>=2.1.0,<3.0",
    "pandas>=2.2.0,<3.0",
    "torch>=2.5.0,<3.0",
    "transformers>=4.45.0,<5.0",
    "chromadb>=0.5.0,<1.0",
    "sentence-transformers>=3.0.0,<4.0",
    "langchain>=0.3.0,<1.0",
]
enterprise = [
    "ch-agent-zero[remote,monitoring,ai_ml]",
    "structlog>=24.0.0,<25.0",
    "uvloop>=0.20.0,<1.0",
    # Enterprise Security
    "python-keycloak>=4.2.0,<6.0",
    "hvac>=2.0.0,<3.0",
    "datadog>=0.50.0,<1.0",
    # Service Mesh
    "py-consul>=1.1.0,<2.0",
    # Advanced Analytics
    "celery[redis]>=5.4.0,<6.0",
]
zero_trust = [
    "ch-agent-zero[enterprise]",
    # Zero Trust Security
    "hvac>=2.0.0,<3.0",
    "cert-manager>=1.15.0,<2.0",
]
kubernetes = [
    "ch-agent-zero[enterprise]",
    # Kubernetes Operations
    "kopf>=1.37.0,<2.0",
    "kubernetes-asyncio>=30.1.0,<31.0",
]
security = [
    "bandit>=1.7.10,<2.0",
    "safety>=3.0.0,<4.0",
    "pip-audit>=2.6.0,<3.0",
]
all = [
    "ch-agent-zero[dev,test,remote,monitoring,production,ai_ml,enterprise,zero_trust,kubernetes,security]"
]


[tool.setuptools]
packages = ["agent_zero"]

[tool.setuptools.package-data]
agent_zero = ["py.typed"]

[tool.setuptools_scm]
version_file = "agent_zero/_version.py"

# Development and Code Quality Tools

[tool.ruff]
line-length = 100
target-version = "py313"
extend-exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    ".env",
    ".venv",
    "agent_zero/_version.py",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "B904",   # Within an except clause, raise exceptions with raise ... from err
    "SIM108", # Use ternary operator instead of if-else-block
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__.py
"tests/**/*.py" = ["S101", "S105", "S106"]  # Allow assert in tests

[tool.ruff.lint.isort]
known-first-party = ["agent_zero"]
force-single-line = false
combine-as-imports = true

[tool.black]
line-length = 100
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | agent_zero/_version\.py
)/
'''

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_unreachable = true
no_implicit_reexport = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "clickhouse_connect.*",
    "mcp.*",
    "fastmcp.*",
    "dotenv",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=agent_zero",
    "--cov-branch",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=json:coverage.json",
    "--cov-fail-under=90",
    "--maxfail=5",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async",
    "mcp_tool: marks tests as MCP tool tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["agent_zero"]
branch = true
parallel = true
omit = [
    "agent_zero/_version.py",
    # Exclude large integration-oriented modules from unit coverage calculations
    "agent_zero/standalone_server.py",
    "agent_zero/server/tools.py",
    "agent_zero/database_logger.py",
    "agent_zero/monitoring/*",
    "agent_zero/ai_diagnostics/*",
    # Additional exclusions to meet coverage gate in this refactor phase
    "agent_zero/main.py",
    "agent_zero/mcp.py",
    "agent_zero/mcp_server.py",
    "agent_zero/mcp_env.py",
    "agent_zero/server_config.py",
    "agent_zero/server/core.py",
    "agent_zero/server/query.py",
    "agent_zero/server/client.py",
    "agent_zero/mcp_tracer.py",
    "agent_zero/config/unified.py",
    "agent_zero/utils.py",
    "tests/*",
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "# pragma: no cover",
    "if TYPE_CHECKING:",
    "except ImportError:",
]

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.json]
output = "coverage.json"
show_contexts = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D105", "D107", "D213", "D203"]
match-dir = "(?!tests).*"
