name: Publish Pre-release

on:
  push:
    tags:
      - 'v*a*'    # Alpha: v1.0.0a1
      - 'v*b*'    # Beta: v1.0.0b1
      - 'v*rc*'   # Release candidate: v1.0.0rc1
    branches:
      - 'release/**'  # Automatic pre-release from release branches
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Pre-release version tag (e.g., v1.0.0rc1)'
        required: false
        type: string
      branch:
        description: 'Branch to publish from (leave empty for current)'
        required: false
        type: string
      prerelease_type:
        description: 'Type of pre-release'
        required: true
        default: 'rc'
        type: choice
        options:
          - 'rc'
          - 'alpha'
          - 'beta'
      skip_tests:
        description: 'Skip tests before publishing'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Perform a dry run (build but do not publish)'
        required: false
        default: false
        type: boolean

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  # Pre-release validation
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      prerelease-type: ${{ steps.version.outputs.prerelease-type }}
      branch-type: ${{ steps.branch.outputs.type }}
      should-publish: ${{ steps.version.outputs.should-publish }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install validation tools
        run: |
          pip install uv setuptools-scm twine

      - name: Determine branch type
        id: branch
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "Branch: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" =~ ^release/.* ]]; then
            echo "type=release" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            echo "type=development" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" =~ ^feature/.* ]]; then
            echo "type=feature" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" =~ ^hotfix/.* ]]; then
            echo "type=hotfix" >> $GITHUB_OUTPUT
          else
            echo "type=other" >> $GITHUB_OUTPUT
          fi

      - name: Validate version and determine publishing strategy
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version_tag }}" ]]; then
            # Manual dispatch with specific tag
            TAG="${{ github.event.inputs.version_tag }}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            VERSION="${TAG#v}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "should-publish=true" >> $GITHUB_OUTPUT

          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ refs/tags/v.* ]]; then
            # Tag push
            TAG="${GITHUB_REF#refs/tags/}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            VERSION="${TAG#v}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "should-publish=true" >> $GITHUB_OUTPUT

          elif [[ "${{ github.event_name }}" == "push" && "${{ steps.branch.outputs.type }}" == "release" ]]; then
            # Release branch push - generate pre-release version
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            BASE_VERSION=$(python scripts/version-manager.py branch --base 0.2.0)
            TAG="v$BASE_VERSION"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "version=$BASE_VERSION" >> $GITHUB_OUTPUT
            echo "should-publish=true" >> $GITHUB_OUTPUT

          else
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping publication - not a pre-release trigger"
            exit 0
          fi

          # Determine pre-release type
          if [[ "$VERSION" =~ rc[0-9]+ ]]; then
            echo "prerelease-type=rc" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ a[0-9]+ ]]; then
            echo "prerelease-type=alpha" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ b[0-9]+ ]]; then
            echo "prerelease-type=beta" >> $GITHUB_OUTPUT
          else
            echo "prerelease-type=rc" >> $GITHUB_OUTPUT
          fi

          echo "‚úÖ Validated pre-release: $VERSION"

      - name: Validate pre-release version format
        if: steps.version.outputs.should-publish == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Validate PEP 440 pre-release format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(a|b|rc)[0-9]+.*$ ]]; then
            echo "‚ùå Invalid pre-release version format: $VERSION"
            echo "Expected formats: 1.0.0a1, 1.0.0b1, 1.0.0rc1"
            exit 1
          fi

          echo "‚úÖ Pre-release version format validated"

  # Run tests for pre-release
  test:
    name: Pre-release Testing
    runs-on: ${{ matrix.os }}
    needs: validate
    if: needs.validate.outputs.should-publish == 'true' && github.event.inputs.skip_tests != 'true'

    strategy:
      fail-fast: false  # Allow some failures for pre-releases
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.13"]
        include:
          # Add extended testing for RC versions
          - os: windows-latest
            python-version: "3.13"
            experimental: true
          - os: macos-latest
            python-version: "3.13"
            experimental: true

    continue-on-error: ${{ matrix.experimental || false }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv pip install -e .[dev,test]

      - name: Run tests
        run: |
          uv run pytest -v --tb=short --cov=agent_zero --cov-report=xml

      - name: Upload coverage (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: prerelease-tests
          name: prerelease-coverage

  # Build pre-release artifacts
  build:
    name: Build Pre-release Artifacts
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: always() && needs.validate.outputs.should-publish == 'true' && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install build tools
        run: |
          pip install uv build twine setuptools-scm

      - name: Generate version for branch-based releases
        if: github.event_name == 'push' && contains(github.ref, 'refs/heads/release/')
        run: |
          # Create a temporary tag for the build
          TEMP_TAG="${{ needs.validate.outputs.tag }}"
          git tag "$TEMP_TAG"
          echo "Created temporary tag: $TEMP_TAG"

      - name: Build distributions
        run: |
          python -m build --sdist --wheel --outdir dist/

      - name: Verify distributions
        run: |
          twine check dist/*
          ls -la dist/

          # Verify version in built packages
          WHEEL_VERSION=$(unzip -p dist/*.whl */METADATA | grep "^Version:" | cut -d" " -f2)
          EXPECTED_VERSION="${{ needs.validate.outputs.version }}"

          echo "Built wheel version: $WHEEL_VERSION"
          echo "Expected version: $EXPECTED_VERSION"

          # For pre-releases, allow some version variations due to setuptools-scm
          if [[ ! "$WHEEL_VERSION" =~ ^${EXPECTED_VERSION%.*} ]]; then
            echo "‚ùå Built wheel version mismatch"
            exit 1
          fi

          echo "‚úÖ Built artifacts verified"

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: prerelease-distributions
          path: dist/
          retention-days: 30  # Shorter retention for pre-releases

  # Publish to PyPI
  publish:
    name: Publish Pre-release to PyPI
    runs-on: ubuntu-latest
    needs: [validate, test, build]
    environment:
      name: pypi-prerelease
      url: https://pypi.org/project/ch-agent-zero/
    permissions:
      id-token: write # Required for Trusted Publishing
      contents: read

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: prerelease-distributions
          path: dist/

      - name: Verify distributions before publishing
        run: |
          ls -la dist/
          echo "Pre-release files to be published:"
          find dist/ -name "*.whl" -o -name "*.tar.gz" | sort

      - name: Dry run check
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "üîç DRY RUN MODE - Would publish these pre-release files:"
          find dist/ -name "*.whl" -o -name "*.tar.gz" -exec ls -lh {} \;
          echo "‚úÖ Dry run completed successfully"

      - name: Publish pre-release to PyPI using Trusted Publishing
        if: github.event.inputs.dry_run != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

  # Create GitHub Pre-release
  github-release:
    name: Create GitHub Pre-release
    runs-on: ubuntu-latest
    needs: [validate, test, build, publish]
    if: always() && needs.validate.outputs.should-publish == 'true' && needs.publish.result == 'success'
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: prerelease-distributions
          path: dist/

      - name: Create temporary tag if needed
        if: github.event_name == 'push' && contains(github.ref, 'refs/heads/release/')
        run: |
          TAG="${{ needs.validate.outputs.tag }}"
          if ! git tag -l | grep -q "^$TAG$"; then
            git tag "$TAG"
            git push origin "$TAG"
            echo "Created and pushed tag: $TAG"
          fi

      - name: Generate pre-release notes
        id: release-notes
        run: |
          TAG="${{ needs.validate.outputs.tag }}"
          VERSION="${{ needs.validate.outputs.version }}"
          TYPE="${{ needs.validate.outputs.prerelease-type }}"

          case "$TYPE" in
            "alpha")
              TYPE_DESCRIPTION="Alpha (Early development)"
              STABILITY="‚ö†Ô∏è **Alpha Release** - Early development version, expect breaking changes"
              ;;
            "beta")
              TYPE_DESCRIPTION="Beta (Feature complete)"
              STABILITY="üî∂ **Beta Release** - Feature complete, testing for stability"
              ;;
            "rc")
              TYPE_DESCRIPTION="Release Candidate (Near stable)"
              STABILITY="üü° **Release Candidate** - Near stable, final testing before release"
              ;;
            *)
              TYPE_DESCRIPTION="Pre-release"
              STABILITY="‚ö†Ô∏è **Pre-release** - Not recommended for production use"
              ;;
          esac

          cat > prerelease-notes.md << EOF
          # Pre-release $VERSION

          $STABILITY

          ## üì¶ Installation

          \`\`\`bash
          pip install ch-agent-zero==$VERSION
          \`\`\`

          ## üîó PyPI Package

          [View on PyPI](https://pypi.org/project/ch-agent-zero/$VERSION/)

          ## üìã What's New in this $TYPE_DESCRIPTION

          EOF

          # Get recent commits for release notes
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ refs/heads/release/.* ]]; then
            echo "### Recent changes in this release branch:" >> prerelease-notes.md
            git log --oneline --no-merges -10 >> prerelease-notes.md
          else
            echo "### Changes since last release:" >> prerelease-notes.md
            git log --oneline --no-merges -5 >> prerelease-notes.md
          fi

          cat >> prerelease-notes.md << EOF

          ## ‚ö†Ô∏è Important Notes

          - This is a pre-release version and may contain bugs
          - Not recommended for production use
          - API may change before stable release
          - Please report issues on GitHub

          ---

          ü§ñ This pre-release was automatically created by GitHub Actions.
          EOF

      - name: Create GitHub Pre-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Pre-release ${{ needs.validate.outputs.version }}
          body_path: prerelease-notes.md
          files: dist/*
          draft: false
          prerelease: true
          make_latest: false

  # Post-publish summary
  post-publish:
    name: Post-publish Summary
    runs-on: ubuntu-latest
    needs: [validate, test, build, publish, github-release]
    if: always() && needs.validate.outputs.should-publish == 'true'

    steps:
      - name: Publish summary
        run: |
          if [[ "${{ needs.publish.result }}" == "success" ]]; then
            echo "## üöÄ Pre-release Published Successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Type:** ${{ needs.validate.outputs.prerelease-type }}" >> $GITHUB_STEP_SUMMARY
            echo "**Tag:** ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "**PyPI:** https://pypi.org/project/ch-agent-zero/${{ needs.validate.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
            echo "**GitHub Release:** https://github.com/maruthiprithivi/agent_zero/releases/tag/${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Pre-release Publication Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Attempted Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testing | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PyPI Publish | ${{ needs.publish.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.github-release.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Skipped summary
        if: needs.validate.outputs.should-publish != 'true'
        run: |
          echo "## ‚è≠Ô∏è Pre-release Publication Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This build was not configured for pre-release publication." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch Type:** ${{ needs.validate.outputs.branch-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
