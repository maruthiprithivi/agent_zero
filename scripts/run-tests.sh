#!/bin/bash
# Agent Zero - Docker-based Test Runner
# This script runs all tests in an isolated Docker container and saves results locally

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="agent-zero"
TEST_IMAGE_NAME="${PROJECT_NAME}-test"
TEST_CONTAINER_NAME="${PROJECT_NAME}-test-runner"
RESULTS_DIR="test-results"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Get the directory of the script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

echo -e "${BLUE}Agent Zero Test Runner${NC}"
echo -e "${BLUE}=====================${NC}"
echo

# Function to cleanup containers
cleanup() {
    echo -e "${YELLOW}Cleaning up...${NC}"
    
    # Stop and remove container if it exists
    if docker ps -a | grep -q "$TEST_CONTAINER_NAME"; then
        docker rm -f "$TEST_CONTAINER_NAME" >/dev/null 2>&1 || true
    fi
    
    # Remove test image if requested
    if [[ "$1" == "--clean-image" ]]; then
        echo -e "${YELLOW}Removing test image...${NC}"
        docker rmi -f "$TEST_IMAGE_NAME" >/dev/null 2>&1 || true
    fi
}

# Function to display help
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  --help, -h           Show this help message"
    echo "  --clean              Remove test container and image after tests"
    echo "  --no-cache           Build Docker image without cache"
    echo "  --test-path PATH     Run specific test file or directory"
    echo "  --pytest-args ARGS   Additional pytest arguments"
    echo "  --keep-container     Don't remove container after tests (for debugging)"
    echo
    echo "Examples:"
    echo "  $0                                    # Run all tests"
    echo "  $0 --test-path tests/test_main.py    # Run specific test file"
    echo "  $0 --pytest-args '-k test_config'    # Run tests matching pattern"
    echo "  $0 --clean --no-cache                # Clean rebuild and test"
    echo
    exit 0
}

# Parse command line arguments
CLEAN_IMAGE=false
NO_CACHE=""
TEST_PATH="tests/"
PYTEST_ARGS=""
KEEP_CONTAINER=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_help
            ;;
        --clean)
            CLEAN_IMAGE=true
            shift
            ;;
        --no-cache)
            NO_CACHE="--no-cache"
            shift
            ;;
        --test-path)
            TEST_PATH="$2"
            shift 2
            ;;
        --pytest-args)
            PYTEST_ARGS="$2"
            shift 2
            ;;
        --keep-container)
            KEEP_CONTAINER=true
            shift
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            show_help
            ;;
    esac
done

# Change to project root
cd "$PROJECT_ROOT"

# Create results directory if it doesn't exist
mkdir -p "$RESULTS_DIR"

# Add to .gitignore if not already there
if ! grep -q "^test-results/" .gitignore 2>/dev/null; then
    echo -e "${YELLOW}Adding test-results/ to .gitignore...${NC}"
    echo -e "\n# Test results (generated by run-tests.sh)\ntest-results/" >> .gitignore
fi

# Cleanup any existing containers
cleanup

# Build the test Docker image
echo -e "${BLUE}Building test Docker image...${NC}"
docker build $NO_CACHE -f Dockerfile.test -t "$TEST_IMAGE_NAME" .

# Prepare test command
TEST_CMD="python -m pytest -v --tb=short"
TEST_CMD="$TEST_CMD --junitxml=/app/test-results/junit.xml"
TEST_CMD="$TEST_CMD --html=/app/test-results/report.html --self-contained-html"
TEST_CMD="$TEST_CMD --cov=agent_zero --cov-report=html:/app/test-results/coverage"
TEST_CMD="$TEST_CMD --cov-report=term"
TEST_CMD="$TEST_CMD $PYTEST_ARGS $TEST_PATH"

# Run tests in Docker container
echo -e "${BLUE}Running tests in Docker container...${NC}"
echo -e "${YELLOW}Test command: $TEST_CMD${NC}"
echo

# Run the container
docker run \
    --name "$TEST_CONTAINER_NAME" \
    --rm=$([[ "$KEEP_CONTAINER" == "false" ]] && echo "true" || echo "false") \
    -v "$PROJECT_ROOT/$RESULTS_DIR:/app/test-results" \
    -e CLICKHOUSE_HOST=mock_host \
    -e CLICKHOUSE_USER=mock_user \
    -e CLICKHOUSE_PASSWORD=mock_password \
    -e CH_AGENT_ZERO_DEBUG=1 \
    "$TEST_IMAGE_NAME" \
    bash -c "$TEST_CMD" \
    | tee "$RESULTS_DIR/test-output-$TIMESTAMP.log"

# Capture exit code
TEST_EXIT_CODE=${PIPESTATUS[0]}

# Copy results from container if it's still running (in case of --keep-container)
if [[ "$KEEP_CONTAINER" == "true" ]] && docker ps | grep -q "$TEST_CONTAINER_NAME"; then
    echo -e "${YELLOW}Container kept for debugging. To remove, run:${NC}"
    echo "  docker rm -f $TEST_CONTAINER_NAME"
fi

# Generate summary file
echo -e "${BLUE}Generating test summary...${NC}"
cat > "$RESULTS_DIR/test-summary-$TIMESTAMP.txt" << EOF
Agent Zero Test Summary
======================
Date: $(date)
Test Exit Code: $TEST_EXIT_CODE
Docker Image: $TEST_IMAGE_NAME
Test Path: $TEST_PATH
Additional Args: $PYTEST_ARGS

Results Files:
- JUnit XML: $RESULTS_DIR/junit.xml
- HTML Report: $RESULTS_DIR/report.html
- Coverage Report: $RESULTS_DIR/coverage/index.html
- Full Output: $RESULTS_DIR/test-output-$TIMESTAMP.log

EOF

# Add test results to summary
if [[ -f "$RESULTS_DIR/test-output-$TIMESTAMP.log" ]]; then
    echo -e "\nTest Output Summary:" >> "$RESULTS_DIR/test-summary-$TIMESTAMP.txt"
    echo "===================" >> "$RESULTS_DIR/test-summary-$TIMESTAMP.txt"
    tail -n 50 "$RESULTS_DIR/test-output-$TIMESTAMP.log" >> "$RESULTS_DIR/test-summary-$TIMESTAMP.txt"
fi

# Create a symlink to latest results
ln -sf "test-summary-$TIMESTAMP.txt" "$RESULTS_DIR/test-summary-latest.txt"
ln -sf "test-output-$TIMESTAMP.log" "$RESULTS_DIR/test-output-latest.log"

# Display results summary
echo
echo -e "${BLUE}Test Results Summary${NC}"
echo -e "${BLUE}====================${NC}"

if [[ $TEST_EXIT_CODE -eq 0 ]]; then
    echo -e "${GREEN}✓ All tests passed!${NC}"
else
    echo -e "${RED}✗ Some tests failed (exit code: $TEST_EXIT_CODE)${NC}"
fi

echo
echo -e "${YELLOW}Results saved to:${NC}"
echo "  - Summary: $RESULTS_DIR/test-summary-latest.txt"
echo "  - JUnit XML: $RESULTS_DIR/junit.xml"
echo "  - HTML Report: $RESULTS_DIR/report.html"
echo "  - Coverage: $RESULTS_DIR/coverage/index.html"
echo "  - Full Log: $RESULTS_DIR/test-output-latest.log"

# Cleanup if requested
if [[ "$CLEAN_IMAGE" == "true" ]]; then
    cleanup --clean-image
fi

# Exit with the same code as the tests
exit $TEST_EXIT_CODE